<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | CallMe枪哥]]></title>
  <link href="http://whatshit.me/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://whatshit.me/"/>
  <updated>2014-08-07T17:48:56+08:00</updated>
  <id>http://whatshit.me/</id>
  <author>
    <name><![CDATA[Suning]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Daemon进程]]></title>
    <link href="http://whatshit.me/blog/2014/03/18/daemonjin-cheng/"/>
    <updated>2014-03-18T15:02:58+08:00</updated>
    <id>http://whatshit.me/blog/2014/03/18/daemonjin-cheng</id>
    <content type="html"><![CDATA[<p> (本文转载: <a href="http://blog.chinaunix.net/uid-27105712-id-3356916.html">http://blog.chinaunix.net/uid-27105712-id-3356916.html</a>)</p>

<p>  daemon进程是后台守护进程，有时候也叫精灵进程(agent).linux 下server都是daemon进程。相信大部分开发人员都知道如何去写一个daemon进程。但是另一方面，大部分人不知道为什么要这么做，不少人是从某个地方copy一个函数，拿来主义。但是具体为什么这么实现，却不是很透彻。
  见过一些面试官或被面试人。很多人解释daemon进程存在的理由是因为僵死进程。或者输入输出。其实和这些东西一毛钱关系都没有。daemon函数存在的原因是因为控制终端由于某些原因（如断开终端链接）会发送一些信号的原因。而接收进城处理这些信号缺省动作会让进程退出。这些信号会由于终端上敲一些特殊按键而产生。</p>

<p>贴一个daemon函数常见的实现:</p>

<p><div class="highlight"><pre><code class="c"><span class="kt">int</span> <span class="nf">daemon</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// 1. 创建子进程</span>
<span class="n">pid_t</span> <span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
<span class="k">if</span><span class="p">(</span> <span class="n">pid</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">)</span> <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="c1">//parent</span>

<span class="c1">// 2. 设置sid</span>
<span class="c1">//first children</span>
<span class="k">if</span><span class="p">(</span><span class="n">setsid</span><span class="p">()</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;setsid failed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="n">assert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// 3. 设置文件权限</span>
<span class="n">umask</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

<span class="c1">// 4. 关闭终端(可选)</span>
<span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
<span class="k">if</span><span class="p">(</span> <span class="n">pid</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

<span class="c1">// 5. 设置目录</span>
<span class="c1">//second children </span>
<span class="n">chdir</span> <span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">);</span>

<span class="c1">// 6. 关闭文件句柄</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">close</span> <span class="p">(</span><span class="n">i</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">stdfd</span> <span class="o">=</span> <span class="n">open</span> <span class="p">(</span><span class="s">&quot;/dev/null&quot;</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">);</span>
<span class="n">dup2</span><span class="p">(</span><span class="n">stdfd</span><span class="p">,</span> <span class="n">STDOUT_FILENO</span><span class="p">);</span>
<span class="n">dup2</span><span class="p">(</span><span class="n">stdfd</span><span class="p">,</span> <span class="n">STDERR_FILENO</span><span class="p">);</span>

<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</code></pre></div></p>

<p>1 、第一次fork的作用是让shell 认为本条命令 已经终止，不用挂在终端输入上。还有一个作用是为后面setsid服务。setsid的调用者不能是进程组组长(group leader). 此时父进程是进程组组长。</p>

<p>2 、setsid() 是本函数最重要的一个调用。它完成了daemon函数想要做的大部分事情。调用完整个函数。子进程是会话组长(sid==pid)，也是进程组组长(pgid == pid)，并且脱离了原来控制终端。到了这一步，基本上不管控制终端如何怎么样。新的进程都不会收到那些信号。</p>

<p>3 、经过前面2个步骤，基本想要做的都做了。第2次fork不是必须的。也看到很多开源服务没有fork第二次。fork第二次主要目的是。防止进程再次打开一个控制终端。因为打开一个控制终端的前台条件是该进程必须是会话组长。再fork一次，子进程ID != sid（sid是进程父进程的sid）。所以也无法打开新的控制终端。</p>

<p>  daemon目的就是防止终端产生的一些信号让进程退出。上面函数并没有直接调用signal函数去处理它。而是间接通过fork和setsid函数使用更少代码优雅处理。而被有些人误以为是僵死进程的原因需要这样处理。</p>

<p>  当然，也有很多程序不是像上面函数那样去实现。而是直接通过忽略信号方式处理。这样其实也不错，因为这些信号很少会有用到的价值。直接忽略基本上不存在误杀的情况。反正达到最终目的就可以。条条大路通罗马。</p>

<p>  下面罗列一下控制终端会产生哪些信号。程序中只要处理好这些信号，同样能达到上面函数实现的目的。</p>

<p><div class="highlight"><pre><code class="c"><span class="c1">//后台进程读取/写入终端输入产生下面两个信号，或者控制终端不存在情况读取和写入会产生</span>
<span class="n">signal</span><span class="p">(</span><span class="n">SIGTTOU</span><span class="p">,</span> <span class="n">SIG_IGN</span><span class="p">);</span>
<span class="n">signal</span><span class="p">(</span><span class="n">SIGTTIN</span><span class="p">,</span> <span class="n">SIG_IGN</span><span class="p">);</span>
<span class="c1">//按CTRL-C ,CTRL-\ CTRL-Z会向前台进程组发送下面这些信号</span>
<span class="n">signal</span><span class="p">(</span><span class="n">SIGINT</span><span class="p">,</span>  <span class="n">SIG_IGN</span> <span class="p">);</span>
<span class="n">signal</span><span class="p">(</span><span class="n">SIGQUIT</span><span class="p">,</span> <span class="n">SIG_IGN</span> <span class="p">);</span>
<span class="n">signal</span><span class="p">(</span><span class="n">SIGTSTP</span><span class="p">,</span> <span class="n">SIG_IGN</span> <span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//终端断开，会给会话组长或孤儿进程组所有成员发送下面信号</span>
<span class="n">signal</span><span class="p">(</span><span class="n">SIGHUP</span><span class="p">,</span>  <span class="n">SIG_IGN</span> <span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//还有有些信号也可以由终端shell产生，需要关注</span>
<span class="n">signal</span><span class="p">(</span><span class="n">SIGCONT</span><span class="p">,</span> <span class="n">SIG_IGN</span> <span class="p">);</span>
<span class="n">signal</span><span class="p">(</span><span class="n">SIGSTOP</span><span class="p">,</span> <span class="n">SIG_IGN</span> <span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</code></pre></div></p>

<p>上面这些信号，应该有些程序缺省处理（SIG_DFL）本身动作就是忽略（SIG_IGN），不是退出进程。不过按照上面写也不会造成什么问题。</p>
]]></content>
  </entry>
  
</feed>
